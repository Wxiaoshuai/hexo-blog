{"meta":{"title":"Hexo","subtitle":"","description":"","author":"w s","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2021-03-17T02:50:53.581Z","updated":"2021-03-17T02:50:53.581Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"关于—-"}],"posts":[{"title":"Hexo搭建博客","slug":"Hexo搭建博客","date":"2021-03-16T08:47:16.000Z","updated":"2021-03-17T02:28:28.168Z","comments":true,"path":"2021/03/16/Hexo搭建博客/","link":"","permalink":"http://example.com/2021/03/16/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"准备工作 创建GitHub仓库 安装Git客户端（下载地址） 电脑绑定密钥 安装Node.js（下载地址） 安装Hexo npm命令安装 1npm install -g hexo-cli 初始化博客 1hexo init blog 常用命令1234# 安装Hexonpm install hexo -g# 升级npm update hexo -g 123456789101112131415161718192021222324# 新建文章hexo n &quot;Acticle name&quot;hexo new &quot;Acticle name&quot;# 创建路由hexo new page &#x27;路由地址名&#x27;# 生成静态文件hexo ghexo generate# 启动本地服务hexo shexo server # 热部署hexo server -s # 冷部署hexo server -p 5000 # 更改端口hexo server -i 192.168.x.x # 自定义IP# 清除缓存hexo clean# 部署到githexo dhexo deploy 部署博客修改配置文件​ 主目录下_config.yml 安装Git部署插件1npm install hexo-deployer-git --save 部署到Github123hexo cleanhexo ghexo d 访问地址：*用户名.github.io* 更换主题主题传送门：Themes 主题下载： 根据主题git仓库下载或直接复制文件到: 主目录/themes/ 下 1git clone https:&#x2F;&#x2F;github.com&#x2F;Bulandent&#x2F;hexo-theme-bubuzou.git themes&#x2F;bubuzou 修改配置文件： 主目录/_config.yml 配置文件 *theme: 主题名称* 根据主题下载依赖： 不同主题需要的依赖不同，请根据主题对应文件下 readme.md 中提示下载安装 参考资料： GitHub+Hexo 搭建个人网站","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"个人博客","slug":"个人博客","permalink":"http://example.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"Docker基础学习","slug":"Docker基础","date":"2021-03-15T08:45:44.000Z","updated":"2021-03-16T08:56:18.055Z","comments":true,"path":"2021/03/15/Docker基础/","link":"","permalink":"http://example.com/2021/03/15/Docker%E5%9F%BA%E7%A1%80/","excerpt":"","text":"Docker是什么？Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置等一并打包到这个容器中，并发布和应用到任意平台上。 三大概念 镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个Ubuntu镜像就是一个包含Ubuntu操作系统环境的模板，同理在该镜像上装上Apache软件，就可以称为Apache镜像 容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的Linux系统环境（包括root权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：镜像本身是只读的，容器从镜像启动时，Docker在镜像的上层创建一个可写层，镜像本身不变 仓库（Repository）：类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用tag进行区分，比如Ubuntu仓库存放有多个版本（12.04、14.04等）的Ubuntu镜像 Windows下安装安装步骤 系统要求windows 10企业版 开启Hyper-V 下载Docker Desktop forWindows 使用exe安装 测试安装是否成功 12# docker run hello-world# docker version 安装问题汇总启动因WSL 2报错，需要安装WSL 2。（适用于 Linux 的 Windows 子系统安装指南） 参考资料: 只要一小时，零基础入门Docker 菜鸟教程-Windows Docker 安装","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"服务器","slug":"服务器","permalink":"http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]}],"categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"个人博客","slug":"个人博客","permalink":"http://example.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"服务器","slug":"服务器","permalink":"http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]}